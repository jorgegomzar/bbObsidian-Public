/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NotesDaterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var NotesDaterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Date format").setDesc("Default date format").addText(
      (text) => text.setPlaceholder("DD MMM YYYY").setValue(this.plugin.settings.dateFormat).onChange(async (value) => {
        this.plugin.settings.dateFormat = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Store date values in note properties").setDesc("This means the plugin will record updates to files in the file itself, rather than relying on file metadata. Recommended for Linux users.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useFixedProperties).onChange(async (value) => {
        this.plugin.settings.useFixedProperties = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
var DEFAULT_SETTINGS = {
  dateFormat: "DD MMM YYYY",
  createdDateFrontmatterProperty: "",
  updatedDateFrontmatterProperty: "",
  useFixedProperties: false
};
var NotesDaterPlugin = class extends import_obsidian.Plugin {
  // Prevents the plugin updating frontmatter properties from triggering event listener - if true, then updates are allowed 
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new NotesDaterSettingTab(this.app, this));
    this.registerEventListeners();
    this.fileUpdateLock = true;
    const statusBarCreatedOn = this.addStatusBarItem();
    const statusBarUpdatedOn = this.addStatusBarItem();
    this.setStatusBarDateValues(statusBarCreatedOn, statusBarUpdatedOn);
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", async () => {
        this.setStatusBarDateValues(statusBarCreatedOn, statusBarUpdatedOn);
      })
    );
  }
  registerEventListeners() {
    this.registerEvent(this.app.vault.on("modify", async (file) => {
      if (!this.fileUpdateLock)
        return;
      const activeFile = this.app.workspace.getActiveFile();
      if (file instanceof import_obsidian.TFile && file.extension === "md" && file.path === (activeFile == null ? void 0 : activeFile.path)) {
        await this.updateNoteFrontmatter(file);
      }
    }));
  }
  async updateNoteFrontmatter(file) {
    var _a;
    this.fileUpdateLock = false;
    const fileContent = await this.app.vault.read(file);
    const frontmatter = ((_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) || {};
    if (this.settings.useFixedProperties) {
      const createdDate = frontmatter["Created_on"] || (0, import_obsidian.moment)(file.stat.ctime).format(this.settings.dateFormat);
      frontmatter["Created_on"] = createdDate;
      const updatedDate = (0, import_obsidian.moment)().format(this.settings.dateFormat);
      frontmatter["Updated_on"] = updatedDate;
    }
    const newFrontmatterString = this.constructFrontmatterString(frontmatter);
    const newFileContent = newFrontmatterString + "\n" + this.stripFrontmatter(fileContent);
    await this.app.vault.modify(file, newFileContent);
    this.fileUpdateLock = true;
  }
  constructFrontmatterString(frontmatter) {
    return "---\n" + Object.entries(frontmatter).map(([key, value]) => `${key}: ${value}`).join("\n") + "\n---";
  }
  stripFrontmatter(fileContent) {
    return fileContent.replace(/---[\s\S]+?---/, "").trim();
  }
  async onunload() {
  }
  isValidDate(dateFrontmatter) {
    return (0, import_obsidian.moment)(dateFrontmatter).isValid() && dateFrontmatter !== void 0;
  }
  setStatusBarDateValues(statusBarCreatedOn, statusBarUpdatedOn) {
    var _a, _b, _c, _d;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.FileView);
    const activeFile = this.app.workspace.getActiveFile();
    if (activeView && activeFile) {
      const stats = activeFile == null ? void 0 : activeFile.stat;
      const createdDateFrontmatter = (_b = (_a = app.metadataCache.getCache(activeFile.path)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b[this.settings.createdDateFrontmatterProperty];
      const updatedDateFrontmatter = (_d = (_c = app.metadataCache.getCache(activeFile.path)) == null ? void 0 : _c.frontmatter) == null ? void 0 : _d[this.settings.updatedDateFrontmatterProperty];
      const createdDate = (0, import_obsidian.moment)(this.isValidDate(createdDateFrontmatter) ? createdDateFrontmatter : stats.ctime).format(this.settings.dateFormat);
      const updatedDate = (0, import_obsidian.moment)(this.isValidDate(updatedDateFrontmatter) ? updatedDateFrontmatter : stats.mtime).format(this.settings.dateFormat);
      statusBarCreatedOn.setText(`Created on: ${createdDate}`);
      statusBarUpdatedOn.setText(`Updated on: ${updatedDate}`);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIG1vbWVudCwgRmlsZVZpZXcsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5jbGFzcyBOb3Rlc0RhdGVyU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICBwbHVnaW46IE5vdGVzRGF0ZXJQbHVnaW47XG5cbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogTm90ZXNEYXRlclBsdWdpbikge1xuICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgfVxuXG4gIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgbGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cbiAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAuc2V0TmFtZShcIkRhdGUgZm9ybWF0XCIpXG4gICAgICAuc2V0RGVzYyhcIkRlZmF1bHQgZGF0ZSBmb3JtYXRcIilcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxuICAgICAgICB0ZXh0XG4gICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiREQgTU1NIFlZWVlcIilcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGF0ZUZvcm1hdClcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kYXRlRm9ybWF0ID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgIC5zZXROYW1lKFwiU3RvcmUgZGF0ZSB2YWx1ZXMgaW4gbm90ZSBwcm9wZXJ0aWVzXCIpXG4gICAgICAuc2V0RGVzYyhcIlRoaXMgbWVhbnMgdGhlIHBsdWdpbiB3aWxsIHJlY29yZCB1cGRhdGVzIHRvIGZpbGVzIGluIHRoZSBmaWxlIGl0c2VsZiwgcmF0aGVyIHRoYW4gcmVseWluZyBvbiBmaWxlIG1ldGFkYXRhLiBSZWNvbW1lbmRlZCBmb3IgTGludXggdXNlcnMuXCIpXG4gICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XG4gICAgICAgIHRvZ2dsZVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VGaXhlZFByb3BlcnRpZXMpXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlRml4ZWRQcm9wZXJ0aWVzID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgTm90ZXNEYXRlclBsdWdpblNldHRpbmdzIHtcbiAgZGF0ZUZvcm1hdDogc3RyaW5nO1xuICBjcmVhdGVkRGF0ZUZyb250bWF0dGVyUHJvcGVydHk6IHN0cmluZztcbiAgdXBkYXRlZERhdGVGcm9udG1hdHRlclByb3BlcnR5OiBzdHJpbmc7XG4gIHVzZUZpeGVkUHJvcGVydGllczogYm9vbGVhblxufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQYXJ0aWFsPE5vdGVzRGF0ZXJQbHVnaW5TZXR0aW5ncz4gPSB7XG4gIGRhdGVGb3JtYXQ6IFwiREQgTU1NIFlZWVlcIixcbiAgY3JlYXRlZERhdGVGcm9udG1hdHRlclByb3BlcnR5OiBcIlwiLFxuICB1cGRhdGVkRGF0ZUZyb250bWF0dGVyUHJvcGVydHk6IFwiXCIsXG4gIHVzZUZpeGVkUHJvcGVydGllczogZmFsc2UsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3Rlc0RhdGVyUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgc2V0dGluZ3M6IE5vdGVzRGF0ZXJQbHVnaW5TZXR0aW5ncztcbiAgZmlsZVVwZGF0ZUxvY2s6IGJvb2xlYW47IC8vIFByZXZlbnRzIHRoZSBwbHVnaW4gdXBkYXRpbmcgZnJvbnRtYXR0ZXIgcHJvcGVydGllcyBmcm9tIHRyaWdnZXJpbmcgZXZlbnQgbGlzdGVuZXIgLSBpZiB0cnVlLCB0aGVuIHVwZGF0ZXMgYXJlIGFsbG93ZWQgXG4gIFxuXG4gIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgfVxuXG4gIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICB9XG5cbiAgYXN5bmMgb25sb2FkKCkge1xuICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG4gICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBOb3Rlc0RhdGVyU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuICAgIHRoaXMucmVnaXN0ZXJFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuZmlsZVVwZGF0ZUxvY2sgPSB0cnVlXG4gICAgY29uc3Qgc3RhdHVzQmFyQ3JlYXRlZE9uID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XG4gICAgY29uc3Qgc3RhdHVzQmFyVXBkYXRlZE9uID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XG5cbiAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcbiAgICB0aGlzLnNldFN0YXR1c0JhckRhdGVWYWx1ZXMoc3RhdHVzQmFyQ3JlYXRlZE9uLCBzdGF0dXNCYXJVcGRhdGVkT24pO1xuXG5cbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXG4gICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2FjdGl2ZS1sZWFmLWNoYW5nZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0dXNCYXJEYXRlVmFsdWVzKHN0YXR1c0JhckNyZWF0ZWRPbiwgc3RhdHVzQmFyVXBkYXRlZE9uKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgLy8gTGlzdGVuIGZvciBmaWxlIGNoYW5nZXMgdGhhdCBtaWdodCByZXF1aXJlIHVwZGF0aW5nIHRoZSBmcm9udG1hdHRlclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC52YXVsdC5vbignbW9kaWZ5JywgYXN5bmMgKGZpbGUpID0+IHtcbiAgICAgIGlmICghdGhpcy5maWxlVXBkYXRlTG9jaykgcmV0dXJuOyAvLyBTa2lwIGlmIHRoZSBwbHVnaW4gaXMgdXBkYXRpbmcgYSBmaWxlXG5cbiAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIG1vZGlmaWVkIGZpbGUgaXMgYSBtYXJrZG93biBmaWxlXG4gICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIGZpbGUuZXh0ZW5zaW9uID09PSAnbWQnICYmIGZpbGUucGF0aCA9PT0gYWN0aXZlRmlsZT8ucGF0aCkge1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZU5vdGVGcm9udG1hdHRlcihmaWxlKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGVOb3RlRnJvbnRtYXR0ZXIoZmlsZTogVEZpbGUpIHtcbiAgICAvLyBzZXQgZmlsZVVwZGF0ZUxvY2sgdG8gZmFsc2UgdG8gcHJldmVudCB0aGUgZXZlbnQgbGlzdGVuZXIgZnJvbSB0cmlnZ2VyaW5nIGEgZmlsZSB1cGRhdGUgZXZlbnQgbGlzdGVuZXIgaW5maW5pdGUgbG9vcFxuICAgIHRoaXMuZmlsZVVwZGF0ZUxvY2sgPSBmYWxzZTtcblxuICAgIGNvbnN0IGZpbGVDb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcbiAgICBjb25zdCBmcm9udG1hdHRlciA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlciB8fCB7fTtcbiAgXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MudXNlRml4ZWRQcm9wZXJ0aWVzKSB7XG4gICAgICBjb25zdCBjcmVhdGVkRGF0ZSA9IGZyb250bWF0dGVyW1wiQ3JlYXRlZF9vblwiXSB8fCBtb21lbnQoZmlsZS5zdGF0LmN0aW1lKS5mb3JtYXQodGhpcy5zZXR0aW5ncy5kYXRlRm9ybWF0KTtcbiAgICAgIGZyb250bWF0dGVyW1wiQ3JlYXRlZF9vblwiXSA9IGNyZWF0ZWREYXRlO1xuICBcbiAgICAgIGNvbnN0IHVwZGF0ZWREYXRlID0gbW9tZW50KCkuZm9ybWF0KHRoaXMuc2V0dGluZ3MuZGF0ZUZvcm1hdCk7IC8vIFVzZSBjdXJyZW50IGRhdGUgZm9yIHVwZGF0ZWREYXRlXG4gICAgICBmcm9udG1hdHRlcltcIlVwZGF0ZWRfb25cIl0gPSB1cGRhdGVkRGF0ZTtcbiAgICB9XG4gIFxuICAgIC8vIFJlY29uc3RydWN0IHRoZSBmcm9udG1hdHRlciBhbmQgZmlsZSBjb250ZW50LCB0aGVuIHdyaXRlIGJhY2sgdG8gdGhlIGZpbGVcbiAgICBjb25zdCBuZXdGcm9udG1hdHRlclN0cmluZyA9IHRoaXMuY29uc3RydWN0RnJvbnRtYXR0ZXJTdHJpbmcoZnJvbnRtYXR0ZXIpO1xuICAgIGNvbnN0IG5ld0ZpbGVDb250ZW50ID0gbmV3RnJvbnRtYXR0ZXJTdHJpbmcgKyAnXFxuJyArIHRoaXMuc3RyaXBGcm9udG1hdHRlcihmaWxlQ29udGVudCk7XG4gICAgYXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0ZpbGVDb250ZW50KTtcblxuICAgIC8vIFJlc2V0IGxvY2sgdG8gYWxsb3cgZXZlbnQgbGlzdGVuZXIgdG8gc2VlIHVwZGF0ZXMgYWdhaW5cbiAgICB0aGlzLmZpbGVVcGRhdGVMb2NrID0gdHJ1ZTtcbiAgfVxuICBcbiAgY29uc3RydWN0RnJvbnRtYXR0ZXJTdHJpbmcoZnJvbnRtYXR0ZXI6IGFueSk6IHN0cmluZyB7XG4gICAgLy8gQ29udmVydCB0aGUgZnJvbnRtYXR0ZXIgb2JqZWN0IGJhY2sgaW50byBhIFlBTUwgc3RyaW5nXG4gICAgcmV0dXJuICctLS1cXG4nICsgT2JqZWN0LmVudHJpZXMoZnJvbnRtYXR0ZXIpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgJHtrZXl9OiAke3ZhbHVlfWApLmpvaW4oJ1xcbicpICsgJ1xcbi0tLSc7XG4gIH1cbiAgXG4gIHN0cmlwRnJvbnRtYXR0ZXIoZmlsZUNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gUmVtb3ZlIHRoZSBleGlzdGluZyBmcm9udG1hdHRlciBmcm9tIHRoZSBmaWxlIGNvbnRlbnRcbiAgICByZXR1cm4gZmlsZUNvbnRlbnQucmVwbGFjZSgvLS0tW1xcc1xcU10rPy0tLS8sICcnKS50cmltKCk7XG4gIH1cblxuICBhc3luYyBvbnVubG9hZCgpIHtcbiAgfVxuXG4gIGlzVmFsaWREYXRlKGRhdGVGcm9udG1hdHRlcikgeyBcbiAgICByZXR1cm4gbW9tZW50KGRhdGVGcm9udG1hdHRlcikuaXNWYWxpZCgpICYmIGRhdGVGcm9udG1hdHRlciAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgc2V0U3RhdHVzQmFyRGF0ZVZhbHVlcyhzdGF0dXNCYXJDcmVhdGVkT24sIHN0YXR1c0JhclVwZGF0ZWRPbikge1xuICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShGaWxlVmlldyk7XG4gICAgY29uc3QgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgaWYgKGFjdGl2ZVZpZXcgJiYgYWN0aXZlRmlsZSkge1xuICAgICAgY29uc3Qgc3RhdHMgPSBhY3RpdmVGaWxlPy5zdGF0XG4gICAgICBjb25zdCBjcmVhdGVkRGF0ZUZyb250bWF0dGVyID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Q2FjaGUoYWN0aXZlRmlsZS5wYXRoKT8uZnJvbnRtYXR0ZXI/Llt0aGlzLnNldHRpbmdzLmNyZWF0ZWREYXRlRnJvbnRtYXR0ZXJQcm9wZXJ0eV1cbiAgICAgIGNvbnN0IHVwZGF0ZWREYXRlRnJvbnRtYXR0ZXIgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRDYWNoZShhY3RpdmVGaWxlLnBhdGgpPy5mcm9udG1hdHRlcj8uW3RoaXMuc2V0dGluZ3MudXBkYXRlZERhdGVGcm9udG1hdHRlclByb3BlcnR5XVxuICAgICAgY29uc3QgY3JlYXRlZERhdGUgPSBtb21lbnQodGhpcy5pc1ZhbGlkRGF0ZShjcmVhdGVkRGF0ZUZyb250bWF0dGVyKSA/IGNyZWF0ZWREYXRlRnJvbnRtYXR0ZXIgOiBzdGF0cy5jdGltZSkuZm9ybWF0KHRoaXMuc2V0dGluZ3MuZGF0ZUZvcm1hdCk7XG4gICAgICBjb25zdCB1cGRhdGVkRGF0ZSA9IG1vbWVudCh0aGlzLmlzVmFsaWREYXRlKHVwZGF0ZWREYXRlRnJvbnRtYXR0ZXIpID8gdXBkYXRlZERhdGVGcm9udG1hdHRlciA6IHN0YXRzLm10aW1lKS5mb3JtYXQodGhpcy5zZXR0aW5ncy5kYXRlRm9ybWF0KTtcbiAgICAgIHN0YXR1c0JhckNyZWF0ZWRPbi5zZXRUZXh0KGBDcmVhdGVkIG9uOiAke2NyZWF0ZWREYXRlfWApO1xuICAgICAgc3RhdHVzQmFyVXBkYXRlZE9uLnNldFRleHQoYFVwZGF0ZWQgb246ICR7dXBkYXRlZERhdGV9YCk7XG4gICAgfVxuICB9XG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUFnRjtBQUVoRixJQUFNLHVCQUFOLGNBQW1DLGlDQUFpQjtBQUFBLEVBR2xELFlBQVlBLE1BQVUsUUFBMEI7QUFDOUMsVUFBTUEsTUFBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2hCO0FBQUEsRUFFQSxVQUFnQjtBQUNkLFFBQUksRUFBRSxZQUFZLElBQUk7QUFFdEIsZ0JBQVksTUFBTTtBQUVsQixRQUFJLHdCQUFRLFdBQVcsRUFDcEIsUUFBUSxhQUFhLEVBQ3JCLFFBQVEscUJBQXFCLEVBQzdCO0FBQUEsTUFBUSxDQUFDLFNBQ1IsS0FDRyxlQUFlLGFBQWEsRUFDNUIsU0FBUyxLQUFLLE9BQU8sU0FBUyxVQUFVLEVBQ3hDLFNBQVMsT0FBTyxVQUFVO0FBQ3pCLGFBQUssT0FBTyxTQUFTLGFBQWE7QUFDbEMsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ2pDLENBQUM7QUFBQSxJQUNMO0FBQ0YsUUFBSSx3QkFBUSxXQUFXLEVBQ3BCLFFBQVEsc0NBQXNDLEVBQzlDLFFBQVEsMklBQTJJLEVBQ25KO0FBQUEsTUFBVSxDQUFDLFdBQ1YsT0FDRyxTQUFTLEtBQUssT0FBTyxTQUFTLGtCQUFrQixFQUNoRCxTQUFTLE9BQU8sVUFBVTtBQUN6QixhQUFLLE9BQU8sU0FBUyxxQkFBcUI7QUFDMUMsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ2pDLENBQUM7QUFBQSxJQUNMO0FBQUEsRUFDSjtBQUNGO0FBU0EsSUFBTSxtQkFBc0Q7QUFBQSxFQUMxRCxZQUFZO0FBQUEsRUFDWixnQ0FBZ0M7QUFBQSxFQUNoQyxnQ0FBZ0M7QUFBQSxFQUNoQyxvQkFBb0I7QUFDdEI7QUFFQSxJQUFxQixtQkFBckIsY0FBOEMsdUJBQU87QUFBQTtBQUFBLEVBS25ELE1BQU0sZUFBZTtBQUNuQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzNFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDbkIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbkM7QUFBQSxFQUVBLE1BQU0sU0FBUztBQUNiLFVBQU0sS0FBSyxhQUFhO0FBQ3hCLFNBQUssY0FBYyxJQUFJLHFCQUFxQixLQUFLLEtBQUssSUFBSSxDQUFDO0FBQzNELFNBQUssdUJBQXVCO0FBQzVCLFNBQUssaUJBQWlCO0FBQ3RCLFVBQU0scUJBQXFCLEtBQUssaUJBQWlCO0FBQ2pELFVBQU0scUJBQXFCLEtBQUssaUJBQWlCO0FBR2pELFNBQUssdUJBQXVCLG9CQUFvQixrQkFBa0I7QUFHbEUsU0FBSztBQUFBLE1BQ0gsS0FBSyxJQUFJLFVBQVUsR0FBRyxzQkFBc0IsWUFBWTtBQUN0RCxhQUFLLHVCQUF1QixvQkFBb0Isa0JBQWtCO0FBQUEsTUFDcEUsQ0FBQztBQUFBLElBQ0g7QUFBQSxFQUNGO0FBQUEsRUFFQSx5QkFBeUI7QUFFdkIsU0FBSyxjQUFjLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxPQUFPLFNBQVM7QUFDN0QsVUFBSSxDQUFDLEtBQUs7QUFBZ0I7QUFFMUIsWUFBTSxhQUFhLEtBQUssSUFBSSxVQUFVLGNBQWM7QUFHcEQsVUFBSSxnQkFBZ0IseUJBQVMsS0FBSyxjQUFjLFFBQVEsS0FBSyxVQUFTLHlDQUFZLE9BQU07QUFDdEYsY0FBTSxLQUFLLHNCQUFzQixJQUFJO0FBQUEsTUFDdkM7QUFBQSxJQUNGLENBQUMsQ0FBQztBQUFBLEVBQ0o7QUFBQSxFQUVBLE1BQU0sc0JBQXNCLE1BQWE7QUFyRzNDO0FBdUdJLFNBQUssaUJBQWlCO0FBRXRCLFVBQU0sY0FBYyxNQUFNLEtBQUssSUFBSSxNQUFNLEtBQUssSUFBSTtBQUNsRCxVQUFNLGdCQUFjLFVBQUssSUFBSSxjQUFjLGFBQWEsSUFBSSxNQUF4QyxtQkFBMkMsZ0JBQWUsQ0FBQztBQUUvRSxRQUFJLEtBQUssU0FBUyxvQkFBb0I7QUFDcEMsWUFBTSxjQUFjLFlBQVksWUFBWSxTQUFLLHdCQUFPLEtBQUssS0FBSyxLQUFLLEVBQUUsT0FBTyxLQUFLLFNBQVMsVUFBVTtBQUN4RyxrQkFBWSxZQUFZLElBQUk7QUFFNUIsWUFBTSxrQkFBYyx3QkFBTyxFQUFFLE9BQU8sS0FBSyxTQUFTLFVBQVU7QUFDNUQsa0JBQVksWUFBWSxJQUFJO0FBQUEsSUFDOUI7QUFHQSxVQUFNLHVCQUF1QixLQUFLLDJCQUEyQixXQUFXO0FBQ3hFLFVBQU0saUJBQWlCLHVCQUF1QixPQUFPLEtBQUssaUJBQWlCLFdBQVc7QUFDdEYsVUFBTSxLQUFLLElBQUksTUFBTSxPQUFPLE1BQU0sY0FBYztBQUdoRCxTQUFLLGlCQUFpQjtBQUFBLEVBQ3hCO0FBQUEsRUFFQSwyQkFBMkIsYUFBMEI7QUFFbkQsV0FBTyxVQUFVLE9BQU8sUUFBUSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLE1BQU0sR0FBRyxRQUFRLE9BQU8sRUFBRSxLQUFLLElBQUksSUFBSTtBQUFBLEVBQ3RHO0FBQUEsRUFFQSxpQkFBaUIsYUFBNkI7QUFFNUMsV0FBTyxZQUFZLFFBQVEsa0JBQWtCLEVBQUUsRUFBRSxLQUFLO0FBQUEsRUFDeEQ7QUFBQSxFQUVBLE1BQU0sV0FBVztBQUFBLEVBQ2pCO0FBQUEsRUFFQSxZQUFZLGlCQUFpQjtBQUMzQixlQUFPLHdCQUFPLGVBQWUsRUFBRSxRQUFRLEtBQUssb0JBQW9CO0FBQUEsRUFDbEU7QUFBQSxFQUVBLHVCQUF1QixvQkFBb0Isb0JBQW9CO0FBOUlqRTtBQStJSSxVQUFNLGFBQWEsS0FBSyxJQUFJLFVBQVUsb0JBQW9CLHdCQUFRO0FBQ2xFLFVBQU0sYUFBYSxLQUFLLElBQUksVUFBVSxjQUFjO0FBQ3BELFFBQUksY0FBYyxZQUFZO0FBQzVCLFlBQU0sUUFBUSx5Q0FBWTtBQUMxQixZQUFNLDBCQUF5QixlQUFJLGNBQWMsU0FBUyxXQUFXLElBQUksTUFBMUMsbUJBQTZDLGdCQUE3QyxtQkFBMkQsS0FBSyxTQUFTO0FBQ3hHLFlBQU0sMEJBQXlCLGVBQUksY0FBYyxTQUFTLFdBQVcsSUFBSSxNQUExQyxtQkFBNkMsZ0JBQTdDLG1CQUEyRCxLQUFLLFNBQVM7QUFDeEcsWUFBTSxrQkFBYyx3QkFBTyxLQUFLLFlBQVksc0JBQXNCLElBQUkseUJBQXlCLE1BQU0sS0FBSyxFQUFFLE9BQU8sS0FBSyxTQUFTLFVBQVU7QUFDM0ksWUFBTSxrQkFBYyx3QkFBTyxLQUFLLFlBQVksc0JBQXNCLElBQUkseUJBQXlCLE1BQU0sS0FBSyxFQUFFLE9BQU8sS0FBSyxTQUFTLFVBQVU7QUFDM0kseUJBQW1CLFFBQVEsZUFBZSxhQUFhO0FBQ3ZELHlCQUFtQixRQUFRLGVBQWUsYUFBYTtBQUFBLElBQ3pEO0FBQUEsRUFDRjtBQUNGOyIsCiAgIm5hbWVzIjogWyJhcHAiXQp9Cg==
